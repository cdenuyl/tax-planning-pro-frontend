/**
 * Net Investment Income Tax (NIIT) Calculation Module
 * 
 * This module provides functions for calculating the Net Investment Income Tax (NIIT),
 * which is a 3.8% tax on investment income for high earners.
 */

/**
 * NIIT tax rate (3.8%)
 * @type {number}
 */
export const NIIT_RATE = 0.038;

/**
 * NIIT thresholds for 2025 by filing status
 * @type {Object}
 */
export const NIIT_THRESHOLDS = {
  'single': 200000,
  'marriedFilingJointly': 250000,
  'headOfHousehold': 200000,
  // Legacy format support
  'married-filing-jointly': 250000
};

/**
 * Calculate Net Investment Income Tax (NIIT)
 * 
 * @param {number} modifiedAGI - Modified Adjusted Gross Income
 * @param {number} netInvestmentIncome - Net investment income amount
 * @param {string} filingStatus - Tax filing status ('single', 'marriedFilingJointly', or 'headOfHousehold')
 * @returns {object} NIIT calculation details
 */
export function calculateNIIT(modifiedAGI, netInvestmentIncome, filingStatus) {
  // Input validation
  if (typeof modifiedAGI !== 'number' || isNaN(modifiedAGI)) {
    console.warn('Invalid modifiedAGI provided to calculateNIIT:', modifiedAGI);
    modifiedAGI = 0;
  }
  
  if (typeof netInvestmentIncome !== 'number' || isNaN(netInvestmentIncome)) {
    console.warn('Invalid netInvestmentIncome provided to calculateNIIT:', netInvestmentIncome);
    netInvestmentIncome = 0;
  }
  
  // Normalize filing status and get threshold
  const normalizedFilingStatus = normalizeFilingStatus(filingStatus);
  const threshold = NIIT_THRESHOLDS[normalizedFilingStatus] || NIIT_THRESHOLDS['single'];
  
  // NIIT applies to the lesser of:
  // 1. Net investment income, or
  // 2. The amount by which MAGI exceeds the threshold
  const excessIncome = Math.max(0, modifiedAGI - threshold);
  const taxableAmount = Math.min(netInvestmentIncome, excessIncome);
  
  const niitTax = taxableAmount * NIIT_RATE;
  
  return {
    threshold,
    modifiedAGI,
    netInvestmentIncome,
    excessIncome,
    taxableAmount,
    niitTax,
    applies: niitTax > 0,
    rate: NIIT_RATE
  };
}

/**
 * Calculate net investment income from income sources
 * 
 * @param {Array} incomeSources - Array of income source objects
 * @returns {number} Total net investment income
 */
export function calculateNetInvestmentIncome(incomeSources) {
  // Input validation
  if (!incomeSources || !Array.isArray(incomeSources)) {
    console.warn('Invalid incomeSources provided to calculateNetInvestmentIncome:', incomeSources);
    return 0;
  }
  
  let netInvestmentIncome = 0;
  
  incomeSources.forEach(source => {
    // Skip disabled sources
    if (!source || !source.enabled) return;
    
    // Calculate yearly amount based on frequency
    const yearlyAmount = source.frequency === 'monthly' ? source.amount * 12 : source.amount;
    
    // Investment income types subject to NIIT
    switch (source.type) {
      case 'dividends':
      case 'qualified-dividends':
      case 'interest':
      case 'long-term-capital-gains':
      case 'short-term-capital-gains':
      case 'rental':
      case 'royalties':
      case 'passive-business':
        netInvestmentIncome += yearlyAmount;
        break;
      default:
        // Not investment income
        break;
    }
  });
  
  return netInvestmentIncome;
}

/**
 * Get NIIT analysis for display
 * 
 * @param {number} modifiedAGI - Modified Adjusted Gross Income
 * @param {number} netInvestmentIncome - Net investment income
 * @param {string} filingStatus - Filing status
 * @returns {object} NIIT analysis for UI display
 */
export function getNIITAnalysis(modifiedAGI, netInvestmentIncome, filingStatus) {
  // Calculate NIIT
  const niit = calculateNIIT(modifiedAGI, netInvestmentIncome, filingStatus);
  
  // Return enhanced analysis with formatted values
  return {
    ...niit,
    ratePercent: `${(NIIT_RATE * 100).toFixed(1)}%`,
    thresholdFormatted: `$${niit.threshold.toLocaleString()}`,
    taxFormatted: `$${Math.round(niit.niitTax).toLocaleString()}`,
    distanceToThreshold: Math.max(0, niit.threshold - modifiedAGI),
    distanceToThresholdFormatted: `$${Math.max(0, niit.threshold - modifiedAGI).toLocaleString()}`
  };
}

/**
 * Normalize filing status to standard format
 * 
 * @param {string} filingStatus - Filing status in any supported format
 * @returns {string} Normalized filing status
 */
function normalizeFilingStatus(filingStatus) {
  if (!filingStatus) return 'single';
  
  // Handle legacy formats
  if (filingStatus === 'married-filing-jointly') return 'marriedFilingJointly';
  if (filingStatus === 'head-of-household') return 'headOfHousehold';
  
  // Handle standard formats
  if (filingStatus === 'marriedFilingJointly' || 
      filingStatus === 'headOfHousehold' || 
      filingStatus === 'single') {
    return filingStatus;
  }
  
  // Default
  return 'single';
}

