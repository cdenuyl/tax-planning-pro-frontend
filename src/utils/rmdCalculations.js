// RMD (Required Minimum Distribution) Calculations
// Based on IRS Uniform Lifetime Table for 2024 and later

// IRS Uniform Lifetime Table - Distribution Period (Life Expectancy Factor)
export const RMD_FACTORS_2024 = {
  72: 27.4,
  73: 26.5,
  74: 25.5,
  75: 24.6,
  76: 23.7,
  77: 22.9,
  78: 22.0,
  79: 21.1,
  80: 20.2,
  81: 19.4,
  82: 18.5,
  83: 17.7,
  84: 16.8,
  85: 16.0,
  86: 15.2,
  87: 14.4,
  88: 13.7,
  89: 12.9,
  90: 12.2,
  91: 11.5,
  92: 10.8,
  93: 10.1,
  94: 9.5,
  95: 8.9,
  96: 8.4,
  97: 7.8,
  98: 7.3,
  99: 6.8,
  100: 6.4,
  101: 6.0,
  102: 5.6,
  103: 5.2,
  104: 4.9,
  105: 4.6,
  106: 4.3,
  107: 4.1,
  108: 3.9,
  109: 3.7,
  110: 3.5,
  111: 3.4,
  112: 3.3,
  113: 3.1,
  114: 3.0,
  115: 2.9
};

// Qualified account types that require RMDs
export const RMD_QUALIFIED_ACCOUNT_TYPES = [
  'traditional-ira',
  'rollover-ira', 
  'traditional-401k',
  'traditional-403b',
  'traditional-457',
  'sep-ira',
  'simple-ira'
];

/**
 * Calculate age from date of birth
 * @param {string} dateOfBirth - Date in MM/DD/YYYY format
 * @returns {number|null} Age in years
 */
export function calculateAge(dateOfBirth) {
  if (!dateOfBirth) return null;
  
  const today = new Date();
  const birthDate = new Date(dateOfBirth);
  
  if (isNaN(birthDate.getTime())) return null;
  
  let age = today.getFullYear() - birthDate.getFullYear();
  const monthDiff = today.getMonth() - birthDate.getMonth();
  
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
    age--;
  }
  
  return age;
}

/**
 * Get RMD factor for a given age
 * @param {number} age - Age in years
 * @returns {number|null} RMD factor or null if age is below RMD requirement
 */
export function getRMDFactor(age) {
  if (!age || age < 72) return null; // RMDs start at age 72 (as of 2023)
  
  // For ages above 115, use the factor for 115
  if (age > 115) return RMD_FACTORS_2024[115];
  
  return RMD_FACTORS_2024[age] || null;
}

/**
 * Calculate RMD amount
 * @param {number} accountBalance - Prior year-end account balance
 * @param {number} age - Current age
 * @returns {object} RMD calculation details
 */
export function calculateRMD(accountBalance, age) {
  const factor = getRMDFactor(age);
  
  if (!factor || !accountBalance || accountBalance <= 0) {
    return {
      rmdAmount: 0,
      factor: null,
      age,
      accountBalance,
      isRequired: false,
      reason: age < 72 ? 'Below RMD age (72)' : 'Invalid balance or age'
    };
  }
  
  const rmdAmount = accountBalance / factor;
  
  return {
    rmdAmount: Math.round(rmdAmount),
    factor,
    age,
    accountBalance,
    isRequired: true,
    reason: null
  };
}

/**
 * Check if an income source type requires RMDs
 * @param {string} sourceType - Income source type
 * @returns {boolean} True if RMD is required
 */
export function isRMDQualifiedAccount(sourceType) {
  return RMD_QUALIFIED_ACCOUNT_TYPES.includes(sourceType);
}

/**
 * Generate RMD income source data
 * @param {string} owner - 'taxpayer' or 'spouse'
 * @param {number} totalBalance - Total qualified account balance
 * @param {number} age - Owner's age
 * @param {string} accountTypes - Description of account types
 * @param {object} taxpayer - Taxpayer information
 * @param {object} spouse - Spouse information
 * @returns {object} RMD income source object
 */
export function generateRMDIncomeSource(owner, totalBalance, age, accountTypes = '', taxpayer = {}, spouse = {}) {
  const rmdCalc = calculateRMD(totalBalance, age);
  const firstName = owner === 'taxpayer' ? (taxpayer.firstName || 'Taxpayer') : (spouse?.firstName || 'Spouse');
  
  return {
    id: `estimated-rmd-${owner}`,
    name: `${firstName} RMD`,
    type: 'estimated-rmd',
    owner,
    description: `Estimated RMD - ${firstName}`,
    amount: rmdCalc.rmdAmount,
    frequency: 'yearly',
    enabled: false, // Default to disabled so user must explicitly enable
    isAutoGenerated: true,
    rmdDetails: {
      qualifiedBalance: totalBalance,
      age,
      factor: rmdCalc.factor,
      isRequired: rmdCalc.isRequired,
      reason: rmdCalc.reason,
      accountTypes,
      canOverride: true,
      overrideAmount: null,
      overrideBalance: null
    }
  };
}

/**
 * Update RMD calculations for all auto-generated RMD sources
 * @param {Array} incomeSources - Current income sources
 * @param {object} taxpayer - Taxpayer information
 * @param {object} spouse - Spouse information
 * @returns {Array} Updated income sources with recalculated RMDs
 */
export function updateRMDCalculations(incomeSources, taxpayer, spouse) {
  const updatedSources = [...incomeSources];
  
  // Calculate qualified account values and existing income draws for taxpayer
  const taxpayerQualifiedSources = incomeSources.filter(source => 
    source.owner === 'taxpayer' && 
    isRMDQualifiedAccount(source.type) && 
    source.accountValue
  );
  const taxpayerQualifiedValue = taxpayerQualifiedSources.reduce((sum, source) => sum + (source.accountValue || 0), 0);
  const taxpayerExistingIncome = taxpayerQualifiedSources.reduce((sum, source) => sum + (source.amount || 0), 0);
  
  // Calculate qualified account values and existing income draws for spouse
  const spouseQualifiedSources = incomeSources.filter(source => 
    source.owner === 'spouse' && 
    isRMDQualifiedAccount(source.type) && 
    source.accountValue
  );
  const spouseQualifiedValue = spouseQualifiedSources.reduce((sum, source) => sum + (source.accountValue || 0), 0);
  const spouseExistingIncome = spouseQualifiedSources.reduce((sum, source) => sum + (source.amount || 0), 0);
  
  const taxpayerAge = calculateAge(taxpayer.dateOfBirth);
  const spouseAge = calculateAge(spouse?.dateOfBirth);
  
  // Remove existing auto-generated RMD sources
  const nonRMDSources = updatedSources.filter(source => source.type !== 'estimated-rmd');
  
  // Add RMD sources only if there's a shortfall (required RMD > existing income)
  if (taxpayerQualifiedValue > 0 && taxpayerAge >= 72) {
    const requiredRMD = calculateRMD(taxpayerQualifiedValue, taxpayerAge).rmdAmount;
    const rmdShortfall = Math.max(0, requiredRMD - taxpayerExistingIncome);
    
    if (rmdShortfall > 0) {
      const taxpayerAccountTypes = taxpayerQualifiedSources.map(source => source.type).join(', ');
      const rmdSource = generateRMDIncomeSource('taxpayer', taxpayerQualifiedValue, taxpayerAge, taxpayerAccountTypes, taxpayer, spouse);
      
      // Override the amount to be only the shortfall
      rmdSource.amount = Math.round(rmdShortfall);
      rmdSource.rmdDetails.shortfallAmount = Math.round(rmdShortfall);
      rmdSource.rmdDetails.existingIncome = taxpayerExistingIncome;
      rmdSource.rmdDetails.requiredRMD = Math.round(requiredRMD);
      
      nonRMDSources.push(rmdSource);
    }
  }
  
  if (spouseQualifiedValue > 0 && spouseAge >= 72) {
    const requiredRMD = calculateRMD(spouseQualifiedValue, spouseAge).rmdAmount;
    const rmdShortfall = Math.max(0, requiredRMD - spouseExistingIncome);
    
    if (rmdShortfall > 0) {
      const spouseAccountTypes = spouseQualifiedSources.map(source => source.type).join(', ');
      const rmdSource = generateRMDIncomeSource('spouse', spouseQualifiedValue, spouseAge, spouseAccountTypes, taxpayer, spouse);
      
      // Override the amount to be only the shortfall
      rmdSource.amount = Math.round(rmdShortfall);
      rmdSource.rmdDetails.shortfallAmount = Math.round(rmdShortfall);
      rmdSource.rmdDetails.existingIncome = spouseExistingIncome;
      rmdSource.rmdDetails.requiredRMD = Math.round(requiredRMD);
      
      nonRMDSources.push(rmdSource);
    }
  }
  
  return nonRMDSources;
}

/**
 * Format RMD information for display
 * @param {object} rmdDetails - RMD details object
 * @returns {object} Formatted display information
 */
export function formatRMDDisplay(rmdDetails) {
  if (!rmdDetails) return null;
  
  return {
    balanceDisplay: new Intl.NumberFormat('en-US', { 
      style: 'currency', 
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(rmdDetails.totalQualifiedBalance),
    
    factorDisplay: rmdDetails.factor ? rmdDetails.factor.toFixed(1) : 'N/A',
    
    ageDisplay: `Age ${rmdDetails.age}`,
    
    calculationDisplay: rmdDetails.factor 
      ? `${new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 0 }).format(rmdDetails.totalQualifiedBalance)} รท ${rmdDetails.factor}`
      : 'Not applicable',
      
    statusDisplay: rmdDetails.isRequired ? 'Required' : rmdDetails.reason || 'Not required'
  };
}

